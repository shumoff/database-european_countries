SET enable_seqscan TO off; --FOR ALL QUERIES

1)
BEFORE

EXPLAIN(ANALYZE) SELECT id, name, territory_sq_km FROM countries ORDER BY territory_sq_km DESC;

                                                 QUERY PLAN
------------------------------------------------------------------------------------------------------------
 Sort  (cost=2.96..3.08 rows=51 width=17) (actual time=0.050..0.053 rows=51 loops=1)
   Sort Key: territory_sq_km DESC
   Sort Method: quicksort  Memory: 27kB
   ->  Seq Scan on countries  (cost=0.00..1.51 rows=51 width=17) (actual time=0.016..0.020 rows=51 loops=1)
 Planning time: 0.138 ms
 Execution time: 0.073 ms
(6 rows)

OPTIMIZATION

CREATE INDEX ON countries(territory_sq_km);

EXPLAIN(ANALYZE) SELECT id, name, territory_sq_km FROM countries ORDER BY territory_sq_km DESC;

                                                                      QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using countries_territory_sq_km_idx on countries  (cost=0.14..12.91 rows=51 width=17) (actual time=0.062..0.073 rows=51 loops=1)
 Planning time: 0.134 ms
 Execution time: 0.105 ms
(3 rows)

/* Cost and actual time have increased, so the use of index is undesirable */

DROP INDEX countries_territory_sq_km_idx;

2)
BEFORE

EXPLAIN(ANALYZE) SELECT sum(population) FROM countries WHERE region_id=1;

                                                         QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=10000000001.66..10000000001.67 rows=1 width=8) (actual time=0.020..0.021 rows=1 loops=1)
   ->  Seq Scan on countries  (cost=10000000000.00..10000000001.64 rows=8 width=4) (actual time=0.012..0.016 rows=8 loops=1)
         Filter: (region_id = 1)
         Rows Removed by Filter: 43
 Planning time: 0.323 ms
 Execution time: 0.041 ms
(6 rows)

OPTIMIZATION 

CREATE INDEX ON countries(region_id);

EXPLAIN(ANALYZE) SELECT sum(population) FROM countries WHERE region_id=1;

                                                               QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=8.30..8.31 rows=1 width=8) (actual time=0.044..0.045 rows=1 loops=1)
   ->  Index Scan using countries_region_id_idx on countries  (cost=0.14..8.28 rows=8 width=4) (actual time=0.035..0.038 rows=8 loops=1)
         Index Cond: (region_id = 1)
 Planning time: 0.098 ms
 Execution time: 0.073 ms
(5 rows)

/* Cost and actual time have increased, so the use of index is undesirable */

DROP INDEX countries_region_id_idx;

3)
BEFORE

EXPLAIN(ANALYZE) SELECT DISTINCT ON (type) type AS types_of_associations FROM major_international_associations;

                                                                          QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=10000000013.33..10000000013.73 rows=80 width=218) (actual time=0.081..0.087 rows=8 loops=1)
   ->  Sort  (cost=10000000013.33..10000000013.53 rows=80 width=218) (actual time=0.080..0.081 rows=14 loops=1)
         Sort Key: type
         Sort Method: quicksort  Memory: 25kB
         ->  Seq Scan on major_international_associations  (cost=10000000000.00..10000000010.80 rows=80 width=218) (actual time=0.027..0.031 rows=14 loops=1)
 Planning time: 0.150 ms
 Execution time: 0.122 ms
(7 rows)

OPTIMIZATION

CREATE INDEX ON major_international_associations(type);

                                                                                         QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=0.14..12.38 rows=14 width=218) (actual time=0.185..0.196 rows=8 loops=1)
   ->  Index Only Scan using major_international_associations_type_idx on major_international_associations  (cost=0.14..12.35 rows=14 width=218) (actual time=0.183..0.187 rows=14 loops=1)
         Heap Fetches: 14
 Planning time: 0.955 ms
 Execution time: 0.233 ms
(5 rows)

/* Cost and actual time have increased, so the use of index is undesirable */ 

DROP INDEX major_international_associations_type_idx;

4)
BEFORE

EXPLAIN(ANALYZE) SELECT * FROM political_parties WHERE year_of_foundation > 1899 ORDER BY year_of_foundation;

                                                               QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10000000002.87..10000000002.99 rows=45 width=59) (actual time=0.179..0.182 rows=45 loops=1)
   Sort Key: year_of_foundation
   Sort Method: quicksort  Memory: 31kB
   ->  Seq Scan on political_parties  (cost=10000000000.00..10000000001.64 rows=45 width=59) (actual time=0.144..0.152 rows=45 loops=1)
         Filter: (year_of_foundation > 1899)
         Rows Removed by Filter: 6
 Planning time: 0.167 ms
 Execution time: 0.219 ms
(8 rows)

CREATE INDEX ON political_parties(year_of_foundation);

                                                                           QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using political_parties_year_of_foundation_idx on political_parties  (cost=0.14..12.93 rows=45 width=59) (actual time=0.018..0.025 rows=45 loops=1)
   Index Cond: (year_of_foundation > 1899)
 Planning time: 0.626 ms
 Execution time: 0.044 ms
(4 rows)

/* We examine both operations (they work with the same index): cost and time have reduced so the index is useful */

5)
BEFORE

EXPLAIN(ANALYZE) SELECT p.country_id, c.name AS country, p.pid, p.name AS party, r.ruler_id, p.leader AS ruler
FROM political_parties p JOIN rulers r ON r.name=p.leader JOIN countries c ON r.country_id=c.id 
WHERE r.end_of_government is NULL;

                                                         QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=4.29..7.21 rows=51 width=57) (actual time=0.173..0.195 rows=21 loops=1)
   Hash Cond: (r.country_id = c.id)
   ->  Hash Join  (cost=2.15..4.36 rows=51 width=52) (actual time=0.061..0.078 rows=21 loops=1)
         Hash Cond: ((p.leader)::text = (r.name)::text)
         ->  Seq Scan on political_parties p  (cost=0.00..1.51 rows=51 width=44) (actual time=0.010..0.013 rows=51 loops=1)
         ->  Hash  (cost=1.51..1.51 rows=51 width=22) (actual time=0.030..0.030 rows=51 loops=1)
               Buckets: 1024  Batches: 1  Memory Usage: 11kB
               ->  Seq Scan on rulers r  (cost=0.00..1.51 rows=51 width=22) (actual time=0.007..0.015 rows=51 loops=1)
                     Filter: (end_of_government IS NULL)
   ->  Hash  (cost=1.51..1.51 rows=51 width=13) (actual time=0.084..0.084 rows=51 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 11kB
         ->  Seq Scan on countries c  (cost=0.00..1.51 rows=51 width=13) (actual time=0.055..0.062 rows=51 loops=1)
 Planning time: 0.653 ms
 Execution time: 0.236 ms
(14 rows)

CREATE INDEX ON rulers(name text_pattern_ops);
CREATE INDEX ON rulers(country_id);
CREATE INDEX ON political_parties(leader text_pattern_ops);
CREATE INDEX ON rulers(end_of_government) WHERE(end_of_government is NULL);

                                                                            QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=13.82..40.82 rows=51 width=57) (actual time=0.095..0.140 rows=21 loops=1)
   Hash Cond: (r.country_id = c.id)
   ->  Merge Join  (cost=0.28..26.58 rows=51 width=52) (actual time=0.060..0.097 rows=21 loops=1)
         Merge Cond: ((p.leader)::text = (r.name)::text)
         ->  Index Scan using political_parties_leader_idx on political_parties p  (cost=0.14..12.91 rows=51 width=44) (actual time=0.035..0.044 rows=51 loops=1)
         ->  Index Scan using rulers_name_idx on rulers r  (cost=0.14..12.91 rows=51 width=22) (actual time=0.016..0.026 rows=51 loops=1)
               Filter: (end_of_government IS NULL)
   ->  Hash  (cost=12.91..12.91 rows=51 width=13) (actual time=0.023..0.023 rows=51 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 11kB
         ->  Index Scan using countries_pkey on countries c  (cost=0.14..12.91 rows=51 width=13) (actual time=0.002..0.011 rows=51 loops=1)
 Planning time: 0.454 ms
 Execution time: 0.187 ms
(12 rows)

/* Uneffective */

6)
BEFORE

EXPLAIN(ANALYZE)SELECT m.aid, m.name AS assosiation,
count (*) AS amount_of_countries_in_association FROM major_international_associations m JOIN country_associations c ON m.aid=c.association_id
GROUP BY m.aid ORDER BY amount_of_countries_in_association DESC;
/*SET enable_seqscan TO on */

                                                                       QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10.74..10.77 rows=14 width=230) (actual time=0.205..0.207 rows=14 loops=1)
   Sort Key: (count(*)) DESC
   Sort Method: quicksort  Memory: 26kB
   ->  HashAggregate  (cost=10.33..10.47 rows=14 width=230) (actual time=0.188..0.190 rows=14 loops=1)
         Group Key: m.aid
         ->  Hash Join  (cost=1.32..9.11 rows=244 width=222) (actual time=0.053..0.140 rows=244 loops=1)
               Hash Cond: (c.association_id = m.aid)
               ->  Seq Scan on country_associations c  (cost=0.00..4.44 rows=244 width=4) (actual time=0.029..0.054 rows=244 loops=1)
               ->  Hash  (cost=1.14..1.14 rows=14 width=222) (actual time=0.017..0.017 rows=14 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                     ->  Seq Scan on major_international_associations m  (cost=0.00..1.14 rows=14 width=222) (actual time=0.007..0.008 rows=14 loops=1)
 Planning time: 0.279 ms
 Execution time: 0.262 ms
(13 rows)

/* INDEXES major_international_associations_pkey and country_associations_pkey already exist, let's just SET enable_seqscan TO off */

                                                                                              QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=31.37..31.40 rows=14 width=230) (actual time=0.204..0.206 rows=14 loops=1)
   Sort Key: (count(*)) DESC
   Sort Method: quicksort  Memory: 26kB
   ->  HashAggregate  (cost=30.96..31.10 rows=14 width=230) (actual time=0.187..0.189 rows=14 loops=1)
         Group Key: m.aid
         ->  Hash Join  (cost=21.95..29.74 rows=244 width=222) (actual time=0.056..0.136 rows=244 loops=1)
               Hash Cond: (c.association_id = m.aid)
               ->  Bitmap Heap Scan on country_associations c  (cost=9.43..13.87 rows=244 width=4) (actual time=0.035..0.052 rows=244 loops=1)
                     Heap Blocks: exact=2
                     ->  Bitmap Index Scan on country_associations_pkey  (cost=0.00..9.37 rows=244 width=0) (actual time=0.020..0.020 rows=244 loops=1)
               ->  Hash  (cost=12.35..12.35 rows=14 width=222) (actual time=0.015..0.015 rows=14 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                     ->  Index Scan using major_international_associations_pkey on major_international_associations m  (cost=0.14..12.35 rows=14 width=222) (actual time=0.006..0.010 rows=14 loops=1)
 Planning time: 0.256 ms
 Execution time: 0.274 ms
(15 rows)

/* Uneffective */

7)
BEFORE

EXPLAIN(ANALYZE)SELECT r.rid, r.name AS region, sum(c.territory_sq_km) AS region_territory_sq_km
FROM countries c JOIN regions r ON c.region_id=r.rid GROUP BY r.rid ORDER BY region_territory_sq_km DESC;

                                                                    QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10000000017.22..10000000017.23 rows=4 width=226) (actual time=0.150..0.151 rows=4 loops=1)
   Sort Key: (sum(c.territory_sq_km)) DESC
   Sort Method: quicksort  Memory: 25kB
   ->  GroupAggregate  (cost=10000000000.13..10000000017.18 rows=4 width=226) (actual time=0.077..0.121 rows=4 loops=1)
         Group Key: r.rid
         ->  Nested Loop  (cost=10000000000.13..10000000016.89 rows=51 width=226) (actual time=0.046..0.102 rows=51 loops=1)
               Join Filter: (c.region_id = r.rid)
               Rows Removed by Join Filter: 153
               ->  Index Scan using regions_pkey on regions r  (cost=0.13..12.19 rows=4 width=222) (actual time=0.012..0.015 rows=4 loops=1)
               ->  Materialize  (cost=10000000000.00..10000000001.76 rows=51 width=8) (actual time=0.006..0.012 rows=51 loops=4)
                     ->  Seq Scan on countries c  (cost=10000000000.00..10000000001.51 rows=51 width=8) (actual time=0.018..0.024 rows=51 loops=1)
 Planning time: 0.276 ms
 Execution time: 0.215 ms
(13 rows)

CREATE INDEX ON countries(region_id);

                                                                        QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=26.08..26.09 rows=4 width=226) (actual time=0.105..0.106 rows=4 loops=1)
   Sort Key: (sum(c.territory_sq_km)) DESC
   Sort Method: quicksort  Memory: 25kB
   ->  GroupAggregate  (cost=0.27..26.04 rows=4 width=226) (actual time=0.041..0.074 rows=4 loops=1)
         Group Key: r.rid
         ->  Merge Join  (cost=0.27..25.74 rows=51 width=226) (actual time=0.025..0.057 rows=51 loops=1)
               Merge Cond: (r.rid = c.region_id)
               ->  Index Scan using regions_pkey on regions r  (cost=0.13..12.19 rows=4 width=222) (actual time=0.015..0.016 rows=4 loops=1)
               ->  Index Scan using countries_region_id_idx on countries c  (cost=0.14..12.91 rows=51 width=8) (actual time=0.006..0.021 rows=51 loops=1)
 Planning time: 0.351 ms
 Execution time: 0.212 ms
(11 rows)

/* Uneffective */


































